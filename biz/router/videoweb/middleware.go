// Code generated by hertz generator.

package videoweb

import (
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"time"
	"videoweb/pkg/utils"
)

func rootMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _authMw() []app.HandlerFunc {
	return []app.HandlerFunc{
		func(c context.Context, ctx *app.RequestContext) {
			code := 200
			accessToken := string(ctx.GetHeader("Access-Token"))
			refreshToken := string(ctx.GetHeader("Refresh-Token"))
			if accessToken == "" || refreshToken == "" {
				code = 404
				err := errors.New("未设置header")
				ctx.JSON(400, err.Error())
				ctx.Abort()
				return
			} else {
				accessclaim, err := utils.ParseToken(accessToken)
				if err != nil || time.Now().Unix() > accessclaim.ExpiresAt {
					refreshclaim, err := utils.ParseToken(refreshToken)
					if err != nil || time.Now().Unix() > refreshclaim.ExpiresAt {
						code = 401
						err := errors.New("RefreshToken过期请重新登录")
						ctx.JSON(400, err.Error())
						ctx.Abort()
						return
					} else {
						var accessToken string
						accessToken, err = utils.GenerateAccessToken(refreshclaim.ID, refreshclaim.UserName, refreshclaim.PassWord)
						ctx.JSON(200, accessToken)
						ctx.Abort()
						return
					}
				} else {
					code = 200
				}
			}
			if code != 200 {
				err := errors.New("无权限")
				ctx.JSON(400, err.Error())
				ctx.Abort()
				return
			}
			ctx.Next(c)
		},
	}
}

func _mfaMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _mfaproMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _mfaqrcodeMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _commentMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _commentdeleteMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _commentlistMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _commentpublishMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _followerMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _followerlistMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _followingMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _followinglistMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _friendsMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _friendslistMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _likeMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _likeactionMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _likelistMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _relationMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _relationactionMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _userMw() []app.HandlerFunc {
	//return []app.HandlerFunc{
	//	func(c context.Context, ctx *app.RequestContext) {
	//		code := 200
	//		accassToken := string(ctx.GetHeader("Accass-Token"))
	//		refreshToken := string(ctx.GetHeader("Refresh-Token"))
	//		if accassToken == "" {
	//			code = 404
	//		} else {
	//			accassclaim, err := utils.ParseToken(accassToken)
	//			if err != nil || time.Now().Unix() > accassclaim.ExpiresAt {
	//				refreshclaim, err := utils.ParseToken(refreshToken)
	//				if err != nil || time.Now().Unix() > refreshclaim.ExpiresAt {
	//					code = 401
	//				} else {
	//					var accassToken, refreshToken string
	//					accassToken, err = utils.GenerateAccassToken(refreshclaim.ID, refreshclaim.UserName, refreshclaim.PassWord)
	//					refreshToken, err = utils.GenerateRefreshToken(refreshclaim.ID, refreshclaim.UserName, refreshclaim.PassWord)
	//					ctx.Request.Header.Set("Accass-Token", accassToken)
	//					ctx.Request.Header.Set("Refresh-Token", refreshToken)
	//				}
	//			} else {
	//				code = 200
	//			}
	//		}
	//		if code != 200 {
	//			err := errors.New("无权限")
	//			ctx.JSON(400, err.Error())
	//			ctx.Abort()
	//			return
	//		}
	//		ctx.Next(c)
	//	},
	//}
	return nil
}

func _infoMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _loginMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _registerMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _avatarMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _avataruploadMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _videoMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _videofeedMw() []app.HandlerFunc {
	// your code...
	return nil
}

func _videolistMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _popularvideoMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _uploadvideoMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _searchvideoMw() []app.HandlerFunc {
	// your code...
	return _authMw()
}

func _mfabindMw() []app.HandlerFunc {
	// your code...
	return nil
}

func Chatwebsocket() []app.HandlerFunc {
	return []app.HandlerFunc{
		func(c context.Context, ctx *app.RequestContext) {
			code := 200
			accessToken := string(ctx.Query("Access-Token"))
			refreshToken := string(ctx.Query("Refresh-Token"))
			if accessToken == "" || refreshToken == "" {
				code = 404
				err := errors.New("未设置header")
				ctx.JSON(400, err.Error())
				ctx.Abort()
				return
			} else {
				accessclaim, err := utils.ParseToken(accessToken)
				if err != nil || time.Now().Unix() > accessclaim.ExpiresAt {
					refreshclaim, err := utils.ParseToken(refreshToken)
					if err != nil || time.Now().Unix() > refreshclaim.ExpiresAt {
						code = 401
						err := errors.New("RefreshToken过期请重新登录")
						ctx.JSON(400, err.Error())
						ctx.Abort()
						return
					} else {
						var accessToken string
						accessToken, err = utils.GenerateAccessToken(refreshclaim.ID, refreshclaim.UserName, refreshclaim.PassWord)
						ctx.JSON(200, accessToken)
						ctx.Abort()
						return
					}
				} else {
					code = 200
				}
			}
			if code != 200 {
				err := errors.New("无权限")
				ctx.JSON(400, err.Error())
				ctx.Abort()
				return
			}
			ctx.Next(c)
		},
	}
}
