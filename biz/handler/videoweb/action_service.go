// Code generated by hertz generator.

package videoweb

import (
	"context"
	"fmt"
	"strconv"
	"videoweb/biz/pack"
	"videoweb/dao"
	"videoweb/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"videoweb/biz/model/videoweb"
)

// LikeAction .
// @router /like/action [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.LikeActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var state int
	claim, _ := utils.ParseToken(string(c.GetHeader("Access-Token")))
	userid := strconv.FormatUint(uint64(claim.ID), 10)
	state, err = req.LikeAction(userid)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	} else {
		resp := pack.BuildLikeActionResp(state)
		c.JSON(consts.StatusOK, resp)
	}
}

// LikeList .
// @router /like/list [GET]
func LikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.LikeListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var videoList []dao.VideoDB
	userid := "user:" + req.UserID
	fmt.Println(userid)
	useridDB, _ := strconv.ParseUint(req.UserID, 10, 64)
	videoList, err = req.LikeList(userid, uint(useridDB))
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp := pack.BuildLikeList(videoList)
	c.JSON(consts.StatusOK, resp)
}

// CommentPublish .
// @router /comment/publish [POST]
func CommentPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.CommentPublishRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	claim, _ := utils.ParseToken(string(c.GetHeader("Access-Token")))
	err = req.CommentPublish(claim)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp := videoweb.CommentPublishResponse{
		Base: &videoweb.BaseResp{
			Code: 200,
			Msg:  "评论成功",
		},
	}
	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var commentlist []dao.CommentDB
	commentlist, err = req.CommentList()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp := pack.BuildCommentListResp(commentlist)
	c.JSON(consts.StatusOK, resp)
}

// CommentDelete .
// @router /comment/delete [DELETE]
func CommentDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.CommentDeleteRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	accassToken := string(c.GetHeader("Access-Token"))
	commentid, _ := strconv.ParseUint(req.CommentID, 10, 64)
	claim, _ := utils.ParseToken(accassToken)
	err = req.DeleteComment(uint(commentid), claim.ID)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	resp := videoweb.CommentDeleteResponse{
		Base: &videoweb.BaseResp{
			Code: 200,
			Msg:  "删除成功",
		},
	}
	c.JSON(consts.StatusOK, resp)
}
