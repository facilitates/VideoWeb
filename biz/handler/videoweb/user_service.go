// Code generated by hertz generator.

package videoweb

import (
	"context"
	"encoding/base64"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/pquerna/otp/totp"
	"github.com/skip2/go-qrcode"
	"mime/multipart"
	"time"
	"videoweb/biz/model/videoweb"
	"videoweb/biz/pack"
	"videoweb/dao"
	"videoweb/pkg/utils"
)

// Register .
// @router /user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	err = req.UserRegister()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	} else {
		resp := pack.BuildRegisterResp()
		c.JSON(consts.StatusOK, resp)
	}
}

// Login .
// @router /user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	userDB, digestPassword, userid, isbindmfa, err := req.UserLogin()
	err = utils.CheckPassword(digestPassword, req.Auth.Password)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	} else {
		if isbindmfa == 1 {
			err := utils.CheckCode(userDB.MfaSecret, req.Code)
			if err != nil {
				c.String(consts.StatusBadRequest, err.Error())
				return
			}
		}
		dao.Redisdb.Set("user_online_state", req.Auth.Username, time.Hour*48)
		var accessToken, refreshToken string
		accessToken, err = utils.GenerateAccessToken(userid, req.Auth.Username, req.Auth.Password)
		refreshToken, err = utils.GenerateRefreshToken(userid, req.Auth.Username, req.Auth.Password)
		type token struct {
			AccessToken  string
			RefreshToken string
		}
		c.JSON(200, token{
			AccessToken:  accessToken,
			RefreshToken: refreshToken,
		})
		resp := pack.BuildLoginResp(userDB)
		c.JSON(consts.StatusOK, resp)
	}
}

// Info .
// @router /user/:username [GET]
func Info(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.InfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	var info dao.UserDB
	err, info = req.UserInfo()
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	} else {
		resp := pack.BuildInfoResp(info)
		c.JSON(consts.StatusOK, resp)
	}
}

// AvatarUpload .
// @router /user/avatar/upload [PUT]
func AvatarUpload(ctx context.Context, c *app.RequestContext) {
	var err error
	var file *multipart.FileHeader
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	file, err = c.FormFile("data")
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	err = utils.ParseAvatarExt(file.Filename)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	var user dao.UserDB
	var filepath string
	var claim *utils.Claims
	claim, err = utils.ParseToken(string(c.GetHeader("Access-Token")))
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	filepath = "./upload/avatar/" + claim.UserName + "/" + file.Filename
	user, err = videoweb.AvatarUpload(filepath, claim.ID)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	} else {
		err := c.SaveUploadedFile(file, filepath)
		if err != nil {
			c.String(consts.StatusBadRequest, err.Error())
		} else {
			resp := pack.BuildUploadAvatarResp(user)
			c.JSON(consts.StatusOK, resp)
		}
	}
}

// MfaQrcode .
// @router /auth/mfa/qrcode [GET]
func MfaQrcode(ctx context.Context, c *app.RequestContext) {
	var err error
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	var claim *utils.Claims
	claim, err = utils.ParseToken(string(c.GetHeader("Access-Token")))
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	secret, err := totp.Generate(totp.GenerateOpts{
		Issuer:      "VideoWeb",
		AccountName: claim.UserName,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	url := "otpauth://totp/" + claim.UserName + "?" + "secret=" + secret.Secret() + "&issuer=VideoWeb"
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	qr, err := qrcode.New(url, qrcode.Medium)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	png, err := qr.PNG(256)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}
	base64Encoding := base64.StdEncoding.EncodeToString(png)
	resp := videoweb.MfaResponse{
		Base: &videoweb.BaseResp{
			Code: 200,
			Msg:  "二维码生成成功",
		},
		Data: &videoweb.Mfa{
			Secret: secret.Secret(),
			Qrcode: "data:image/png;base64," + base64Encoding,
		},
	}
	c.JSON(consts.StatusOK, resp)
}

// MfaBind .
// @router /auth/mfa/bind [POST]
func MfaBind(ctx context.Context, c *app.RequestContext) {
	var err error
	var req videoweb.MfaBindRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := pack.BuildErrResp(400, err)
		c.JSON(200, resp)
		return
	}
	claim, _ := utils.ParseToken(string(c.GetHeader("Access-Token")))
	err = utils.CheckCode(req.Secret, req.Code)
	if err != nil {
		resp := pack.BuildErrResp(400, err)
		c.JSON(200, resp)
		return
	}
	err = req.MfaBind(claim.ID)
	if err != nil {
		resp := pack.BuildErrResp(400, err)
		c.JSON(200, resp)
		return
	}
	resp := videoweb.MfaBindResponse{
		Base: &videoweb.BaseResp{
			Code: 200,
			Msg:  "MFA绑定成功",
		},
	}
	c.JSON(consts.StatusOK, resp)
}
